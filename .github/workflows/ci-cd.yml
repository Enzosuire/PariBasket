name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7 
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: paribasket_test
        ports:
          - 3306:3306 

    steps:
      #  Récupération du code
      - name: Checkout code
        uses: actions/checkout@v3

      #  Installation de PHP et des extensions
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo, pdo_mysql, intl

      #  Cache Composer pour accélérer les builds
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: composer-${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-${{ runner.os }}-

      #  Installation des dépendances Symfony
      - name: Install Dependencies
        run: composer install --no-interaction --prefer-dist

      #  Attendre que MySQL soit prêt
      - name: Wait for MySQL
        run: sleep 10s
  
      - name: Set up DATABASE_URL
        run: echo "DATABASE_URL=sqlite:///%kernel.project_dir%/data/database.sqlite" >> $GITHUB_ENV
  
      - name: Copy .env.test.local (if exists)
        run: php -r "file_exists('../.env.test.local') || copy('../.env.test', '../.env.test.local');"
  
      - name: Remove .env.test.local (force SQLite)
        run: rm -f ../.env.test.local
  
      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**../composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-
      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist 
  
      - name: Create Database
        run: |
          mkdir -p data
          touch data/database.sqlite
          ls -l data/  # Debug
      - name: Run Migrations
        run: php bin/console doctrine:schema:update --force

      #  Lancer les tests Symfony
      - name: Run Backend Tests
        run: vendor/bin/phpunit

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      #  Récupération du code
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      #  Vérifier que docker-compose.yml existe avant de déployer
      - name: Deploy with Docker Compose
        run: |
          if [ -f docker/docker-compose.yml ]; then
            docker-compose pull
            docker-compose up -d
          else
            echo "No docker-compose.yml found!"
            exit 1
          fi
      - name: Show running containers
        run: docker ps -a

      - name : Migrations
        run: |
          if [ -f docker/docker-compose.yml ]; then
            docker-compose pull
            docker-compose up -d
        
            # Vérifier si la base de données existe
            if ! docker-compose exec db mysql -u root -p 'password' -e "SHOW DATABASES LIKE 'mydatabase';" | grep -q "mydatabase"; then
              echo "Database does not exist. Creating the database..."
              
              # Créer la base de données
              docker-compose exec backend php bin/console doctrine:database:create
        
              # Exécuter les migrations
              docker-compose exec backend php bin/console doctrine:schema:update --force
        
              # Vérifier que les migrations se sont bien appliquées (optionnel)
              docker-compose exec db mysql -u root -p 'password' mydatabase -e "SELECT * FROM user;"
            else
              echo "Database already exists. Skipping database creation and migrations."
            fi
          else
            echo "No docker-compose.yml found!"
            exit 1
          fi
